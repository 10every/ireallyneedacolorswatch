import { motion } from 'motion/react';
import { Share2, Instagram, Copy, ChevronDown } from 'lucide-react';
import { useState, useEffect, useRef } from 'react';

interface ColorSwatchProps {
  color: string;
  pantoneCode: string;
  pantoneName: string;
  prompt: string;
}

export function ColorSwatch({ color, pantoneCode, pantoneName, prompt }: ColorSwatchProps) {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const shareUrl = `${window.location.origin}?color=${encodeURIComponent(color)}&name=${encodeURIComponent(pantoneName)}&code=${encodeURIComponent(pantoneCode)}&prompt=${encodeURIComponent(prompt)}`;
  const shareText = `Check out this perfect color: ${pantoneName} (${color}) - generated by i really need a color swatch! ${shareUrl}`;

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Generate PNG of the color swatch
  const generateColorPNG = async (): Promise<Blob> => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (!ctx) throw new Error('Could not get canvas context');

    // Set canvas size for social media (1080x1080 for Instagram)
    canvas.width = 1080;
    canvas.height = 1080;

    // Fill background with the color
    ctx.fillStyle = color;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Add text overlay with proper wrapping
    ctx.fillStyle = '#FFFFFF';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    
    // Helper function to wrap text
    const wrapText = (text: string, maxWidth: number, fontSize: number) => {
      ctx.font = `${fontSize}px Arial`;
      const words = text.split(' ');
      const lines = [];
      let currentLine = words[0];

      for (let i = 1; i < words.length; i++) {
        const word = words[i];
        const width = ctx.measureText(currentLine + ' ' + word).width;
        if (width < maxWidth) {
          currentLine += ' ' + word;
        } else {
          lines.push(currentLine);
          currentLine = word;
        }
      }
      lines.push(currentLine);
      return lines;
    };

    // Add color name with wrapping
    ctx.font = 'bold 48px Arial';
    const nameLines = wrapText(pantoneName, canvas.width - 100, 48);
    nameLines.forEach((line, index) => {
      ctx.fillText(line, canvas.width / 2, canvas.height / 2 - 60 + (index * 60));
    });
    
    // Add hex code
    ctx.font = '36px Arial';
    ctx.fillText(color.toUpperCase(), canvas.width / 2, canvas.height / 2 + 40);
    
    // Add color code (without Pantone branding)
    ctx.font = '24px Arial';
    ctx.fillText(pantoneCode.replace('PANTONE ', ''), canvas.width / 2, canvas.height / 2 + 100);
    
    // Add website attribution
    ctx.font = '20px Arial';
    ctx.fillText('i really need a color swatch', canvas.width / 2, canvas.height - 100);

    return new Promise((resolve) => {
      canvas.toBlob((blob) => {
        if (blob) resolve(blob);
      }, 'image/png');
    });
  };

  const handleShare = async () => {
    try {
      const pngBlob = await generateColorPNG();
      const file = new File([pngBlob], `${pantoneName.replace(/\s+/g, '_')}_color_swatch.png`, { type: 'image/png' });
      
      if (navigator.share && navigator.canShare && navigator.canShare({ files: [file] })) {
        await navigator.share({
          title: `${pantoneName} - Perfect Color`,
          text: shareText,
          url: shareUrl,
          files: [file]
        });
      } else {
        // Fallback: copy link to clipboard
        navigator.clipboard.writeText(shareUrl);
        alert('Shareable link copied to clipboard!');
      }
    } catch (err) {
      console.log('Error sharing:', err);
      // Fallback: copy link
      navigator.clipboard.writeText(shareUrl);
      alert('Shareable link copied to clipboard!');
    }
  };

  const handleXShare = async () => {
    try {
      const pngBlob = await generateColorPNG();
      const file = new File([pngBlob], `${pantoneName.replace(/\s+/g, '_')}_color_swatch.png`, { type: 'image/png' });
      
      if (navigator.share && navigator.canShare && navigator.canShare({ files: [file] })) {
        await navigator.share({
          title: `${pantoneName} - Perfect Color`,
          text: shareText,
          files: [file]
        });
      } else {
        // Fallback: open Twitter with text
        const xUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}`;
        window.open(xUrl, '_blank');
      }
    } catch (err) {
      // Fallback: open Twitter
      const xUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}`;
      window.open(xUrl, '_blank');
    }
  };

  const handleInstagramShare = async () => {
    try {
      const pngBlob = await generateColorPNG();
      const file = new File([pngBlob], `${pantoneName.replace(/\s+/g, '_')}_color_swatch.png`, { type: 'image/png' });
      
      if (navigator.share && navigator.canShare && navigator.canShare({ files: [file] })) {
        await navigator.share({
          title: `${pantoneName} - Perfect Color`,
          text: shareText,
          files: [file]
        });
      } else {
        // Fallback: download the image
        const url = URL.createObjectURL(pngBlob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${pantoneName.replace(/\s+/g, '_')}_color_swatch.png`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        alert('Color swatch image downloaded! You can now share it on Instagram.');
      }
    } catch (err) {
      console.log('Error sharing to Instagram:', err);
    }
  };

  const handleTikTokShare = async () => {
    try {
      const pngBlob = await generateColorPNG();
      const file = new File([pngBlob], `${pantoneName.replace(/\s+/g, '_')}_color_swatch.png`, { type: 'image/png' });
      
      if (navigator.share && navigator.canShare && navigator.canShare({ files: [file] })) {
        await navigator.share({
          title: `${pantoneName} - Perfect Color`,
          text: shareText,
          files: [file]
        });
      } else {
        // Fallback: download the image
        const url = URL.createObjectURL(pngBlob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${pantoneName.replace(/\s+/g, '_')}_color_swatch.png`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        alert('Color swatch image downloaded! You can now share it on TikTok.');
      }
    } catch (err) {
      console.log('Error sharing to TikTok:', err);
    }
  };

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(shareUrl);
      alert('Link copied to clipboard!');
    } catch (err) {
      console.log('Error copying link:', err);
    }
  };
  return (
    <motion.div 
      initial={{ opacity: 0, y: 30 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 1.2, ease: "easeOut" }}
      className="flex flex-col items-center gap-4 mt-4"
    >
      {/* Color Card */}
      <motion.div 
        className="bg-white border-2 border-black overflow-hidden"
        style={{ width: '300px' }}
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 1.0, delay: 0.3, ease: "easeOut" }}
      >
        {/* Color Block - Perfect Square */}
        <div 
          style={{ 
            width: '300px', 
            height: '300px',
            backgroundColor: color 
          }}
        />
        
        {/* Color Information Panel */}
        <div className="bg-white p-3 space-y-2">
          {/* Color Name */}
          <div className="space-y-1">
            <h3 className="text-base font-medium text-black">
              {pantoneName}
            </h3>
            <p className="text-xs text-black font-mono uppercase tracking-wide">
              {pantoneCode.replace('PANTONE ', '')}
            </p>
          </div>
          
          {/* Color Values */}
          <div className="space-y-1 pt-2 border-t-2 border-black">
            <div className="flex justify-between">
              <span className="text-xs font-medium text-black uppercase tracking-wide">
                HEX
              </span>
              <span className="text-xs font-mono text-black">
                {color.toUpperCase()}
              </span>
            </div>
            <div className="flex justify-between">
              <span className="text-xs font-medium text-black uppercase tracking-wide">
                RGB
              </span>
              <span className="text-xs font-mono text-black">
                {(() => {
                  const hex = color.replace('#', '');
                  const r = parseInt(hex.substring(0, 2), 16);
                  const g = parseInt(hex.substring(2, 4), 16);
                  const b = parseInt(hex.substring(4, 6), 16);
                  return `${r}, ${g}, ${b}`;
                })()}
              </span>
            </div>
          </div>
        </div>
      </motion.div>
      
      {/* Share Button with Dropdown */}
      <motion.div 
        ref={dropdownRef}
        className="relative mt-2"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.8, delay: 0.8 }}
      >
        <button
          onClick={() => setIsDropdownOpen(!isDropdownOpen)}
          className="flex items-center gap-2 px-4 py-2 bg-white text-black border-2 border-black hover:bg-gray-100 transition-colors duration-200"
        >
          <Share2 className="w-4 h-4" />
          <span className="text-sm font-medium">Share</span>
          <ChevronDown className={`w-3 h-3 transition-transform duration-200 ${isDropdownOpen ? 'rotate-180' : ''}`} />
        </button>
        
        {/* Dropdown Menu */}
        {isDropdownOpen && (
          <motion.div 
            className="absolute top-full left-0 mt-1 bg-white border-2 border-black shadow-lg z-10"
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.2 }}
          >
            <button
              onClick={() => {
                handleXShare();
                setIsDropdownOpen(false);
              }}
              className="flex items-center gap-2 w-full px-4 py-2 text-left hover:bg-gray-100 transition-colors duration-200"
            >
              <span className="w-4 h-4 text-sm font-bold">X</span>
              <span className="text-sm">Share on X</span>
            </button>
            <button
              onClick={() => {
                handleInstagramShare();
                setIsDropdownOpen(false);
              }}
              className="flex items-center gap-2 w-full px-4 py-2 text-left hover:bg-gray-100 transition-colors duration-200 border-t border-gray-200"
            >
              <Instagram className="w-4 h-4" />
              <span className="text-sm">Share on Instagram</span>
            </button>
            <button
              onClick={() => {
                handleTikTokShare();
                setIsDropdownOpen(false);
              }}
              className="flex items-center gap-2 w-full px-4 py-2 text-left hover:bg-gray-100 transition-colors duration-200 border-t border-gray-200"
            >
              <span className="w-4 h-4 text-sm font-bold">T</span>
              <span className="text-sm">Share on TikTok</span>
            </button>
            <button
              onClick={() => {
                handleCopyLink();
                setIsDropdownOpen(false);
              }}
              className="flex items-center gap-2 w-full px-4 py-2 text-left hover:bg-gray-100 transition-colors duration-200 border-t border-gray-200"
            >
              <Copy className="w-4 h-4" />
              <span className="text-sm">Copy Link</span>
            </button>
          </motion.div>
        )}
      </motion.div>

      {/* Inspiration Credit */}
      <motion.div 
        className="text-center"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.8, delay: 1.0 }}
      >
        <p className="text-xs text-white opacity-80">
          inspired by "{prompt}"
        </p>
      </motion.div>
    </motion.div>
  );
}